<?xml version="1.0" encoding="UTF-8"?>
<!-- Add xmlns:util namespace definition to be able to use stuff from
     WixUtilExtension dll-->
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi"
    xmlns:util="http://schemas.microsoft.com/wix/UtilExtension">
  <!-- This is how we include wxi files -->
  <?include $(sys.CURRENTDIR)Includes\AppVariables.wxi ?>
  <!--
  Id="*" is to enable upgrading. * means that the product ID will be
  auto-generated on each build _(based on a stable hash)_.

  Name is made of localized product name and version number.
  -->
  <Product Id="*" Name="!(loc.ProductName) $(var.VersionNumber)"
      Language="!(loc.LANG)" Version="$(var.VersionNumber)"
      Manufacturer="!(loc.ManufacturerName)" UpgradeCode="$(var.UpgradeCode)">
    <!-- Define the minimum supported installer version (3.0) and that the
         install should be done for the whole machine not just the current user
         -->
    <Package InstallerVersion="300" Compressed="yes" InstallScope="perMachine"/>
    <Media Id="1" Cabinet="media1.cab" EmbedCab="yes" />
    <!-- Upgrade settings. This will be explained in more detail in a future post -->
    <Upgrade Id="$(var.UpgradeCode)">
      <UpgradeVersion OnlyDetect="yes" Minimum="$(var.VersionNumber)"
          IncludeMinimum="no" Property="NEWER_VERSION_FOUND" />
      <UpgradeVersion Minimum="0.0.0.0" IncludeMinimum="yes"
          Maximum="$(var.VersionNumber)" IncludeMaximum="no"
          Property="OLDER_VERSION_FOUND" />
    </Upgrade>
    <InstallExecuteSequence>
      <!-- Remove the previous versions of the product -->
      <RemoveExistingProducts After="InstallInitialize"/>
      <!-- WixCloseApplications is a built in custom action that uses
           util:CloseApplication below -->
      <Custom Action="WixCloseApplications" Before="InstallInitialize" />
    </InstallExecuteSequence>
    <!-- This will ask the user to close the App app if it's running while
         upgrading -->
    <util:CloseApplication Id="CloseApp" CloseMessage="no"
        Description="!(loc.MustCloseApp)" ElevatedCloseMessage="no"
        RebootPrompt="no" Target="$(var.ExeProcessName)" />
    <!-- Use the built in WixUI_InstallDir GUI -->
    <UIRef Id="WixUI_InstallDir" />
    <UI>
      <!-- These dialog references are needed for CloseApplication above to
           work correctly -->
      <DialogRef Id="FilesInUse" />
      <DialogRef Id="MsiRMFilesInUse" />
      <!-- Here we'll add the GUI logic for installation and updating in a
           future post-->
    </UI>
    <!-- Set the icon to show next to the program name in Add/Remove programs
         -->
    <Icon Id="$(var.AppShortName)Icon.ico" SourceFile="$(var.IconPath)" />
    <Property Id="ARPPRODUCTICON" Value="$(var.AppShortName)Icon.ico" />
    <!-- Installer UI custom pictures. File names are made up. Add path to your
         pics. -->
    <!--
    <WixVariable Id="WixUIDialogBmp" Value="MyAppLogo.jpg" />
    <WixVariable Id="WixUIBannerBmp" Value="installBanner.jpg" />
    -->
    <!-- __NB__ The path containing the text to be displayed for the _End-User
         License-Agreement (EULA)_.

         If a localized version of the EULA is required, see [here][1] for
         instructions.

         [1]: http://weblogs.sqlteam.com/mladenp/archive/2010/04/15/WiX-3-Tutorial-Custom-EULA-License-and-MSI-localization.aspx
    -->
    <WixVariable Id="WixUILicenseRtf" Value="Lang\en-us\EULA_en-us.rtf" />
    <!-- the default directory structure -->
    <Directory Id="TARGETDIR" Name="SourceDir">
      <Directory Id="ProgramFilesFolder">
          <Directory Id="INSTALLFOLDER" Name="!(loc.ProductName)" />
      </Directory>
      <Directory Id='ProgramMenuFolder'>
          <Directory Id='ApplicationProgramsFolder' Name='!(loc.ProductName)' />
      </Directory>
      <!-- Provide a means to refer to the Windows system-folder using the
           label "SYSTEM_FOLDER" -->
      <Directory Id='SystemFolder' Name='SYSTEM_FOLDER' />
    </Directory>
    <!-- Add launcher script, which calls the portable-Python executable to run
         the `microdrop.microdrop` Python package as an application. -->
    <Component Id="LauncherComponent" Directory="INSTALLFOLDER" Guid="*">
        <File Id="LauncherFile" KeyPath="yes" Source="$(var.ResourcesDir)\microdrop.bat" />
    </Component>
    <!-- Step 2: Add the shortcut to your installer package -->
    <Component Id="ApplicationShortcut" Directory="ApplicationProgramsFolder" Guid="*" >
        <!-- Link to [command-prompt][1] instead of linking to the batch script
             directly, to allow pinning the shortcut to the task bar in Windows
             7 and Window 8.

             Use [`&quot;` to escape quotes][2] around installation path.  The
             installation path must be enclosed in quotes to support paths
             containing spaces.

             [1]: http://mattrefghi.com/blog/2012/06/how-to-pin-a-batch-file-to-the-taskbar-in-windows-7/
             [2]: http://stackoverflow.com/questions/650821/how-do-i-escape-double-quotes-in-attributes-in-an-xml-string-in-t-sql
        -->
        <Shortcut Id="ApplicationStartMenuShortcut" Name="!(loc.ProductName)"
            Description="!(loc.ProductName)"
            Target="[SYSTEM_FOLDER]cmd.exe"
            Arguments="/c &quot;[INSTALLFOLDER]microdrop.bat&quot;"
            WorkingDirectory="INSTALLFOLDER"
            Icon="$(var.AppShortName)Icon.ico" />
        <RemoveFolder Id="ApplicationProgramsFolder" On="uninstall"/>
        <RegistryValue Root="HKCU" Key="Software\Microsoft\$(var.AppShortName)"
            Name="installed" Type="integer" Value="1" KeyPath="yes"/>
    </Component>
    <!--
    Set the default install location to the value of
    INSTALLFOLDER (usually c:\Program Files\YourProductName)
    -->
    <Property Id="WIXUI_INSTALLDIR" Value="INSTALLFOLDER" />
    <!-- Set the components defined in our fragment files that will be used for
         our feature  -->
    <Feature Id="AppFeature" Title="!(loc.ProductName)" Level="1">
      <ComponentGroupRef Id="AppFiles" />
      <ComponentRef Id="LauncherComponent" />
      <ComponentRef Id="ApplicationShortcut" />
    </Feature>
  </Product>
</Wix>
